package com.epion_t3.devtools.component;

import com.epion_t3.devtools.bean.DevGeneratorContext;
import com.epion_t3.devtools.bean.FunctionModel;
import com.epion_t3.devtools.bean.Property;
import com.epion_t3.devtools.exception.GeneratorException;
import com.zomu_t.lib.java.generate.common.context.GenerateContext;
import com.zomu_t.lib.java.generate.common.context.GenerateTarget;
import com.zomu_t.lib.java.generate.common.type.DefaultTemplate;
import com.zomu_t.lib.java.generate.java8.generator.Java8Generator;
import com.zomu_t.lib.java.generate.java8.model.*;
import com.zomu_t.lib.java.generate.java8.type.AccessModifier;
import com.zomu_t.lib.java.generate.java8.type.ClassKind;
import com.zomu_t.lib.java.generate.java8.util.TypeUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.text.WordUtils;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Map;
import java.util.Properties;

/**
 * message.properties、Messages.javaの出力コンポーネント.
 *
 * @author takashno
 */
public final class MessageGenerateComponent implements Component {

    /**
     * シングルトンインスタンス.
     */
    private static MessageGenerateComponent instance = new MessageGenerateComponent();

    /**
     * プライベートコンストラクタ.
     */
    private MessageGenerateComponent() {
        // Do Nothing...
    }

    /**
     * シングルトンインスタンスの取得.
     *
     * @return シングルトンインスタンス
     */
    public static MessageGenerateComponent getInstance() {
        return instance;
    }

    /**
     * messages.propertiesの出力.
     *
     * @param context コンテキスト
     */
    public void execute(DevGeneratorContext context) {

        for (Map.Entry<String, FunctionModel> entry : context.getFunctionModelMap().entrySet()) {

            // プロパティ作成
            Properties props = new Properties();
            for (Property property : entry.getValue().getMessages().values()) {
                props.put(property.getKey(), property.getValue());
            }
            try (FileOutputStream fos = new FileOutputStream(
                    new File(context.getExecuteOptions().getMessageOutput(),
                            context.getSpec().getInfo().getName() + "_messages_" + entry.getKey() + ".properties"));) {
                props.store(fos, " Generated by epion-t3-devtools");
            } catch (IOException e) {
                throw new GeneratorException("fail output messages.properties.", e);
            }


            // Enum Messages.java の出力パス解決
            String enumJavaOutputDir = null;

            if (StringUtils.isEmpty(context.getExecuteOptions().getJavaOutput())) {
                enumJavaOutputDir = "./";
            } else {
                enumJavaOutputDir = context.getExecuteOptions().getJavaOutput();
            }

            enumJavaOutputDir = enumJavaOutputDir
                    + context.getSpec().getInfo().getCustomPackage().replace(".", "/")
                    + "/messages";

            Path parentDir = Paths.get(enumJavaOutputDir);
            if (!Files.exists(parentDir)) {
                try {
                    Files.createDirectories(parentDir);
                } catch (IOException e) {
                    throw new GeneratorException("fail output Messages.java parent directory. path:" + parentDir.toString(), e);
                }
            }

            // ファイルパス
            Path enumJava = Paths.get(parentDir.toString(),
                    WordUtils.capitalize(context.getSpec().getInfo().getName()) + "Messages.java");

            try (FileWriter fileWriter = new FileWriter(enumJava.toFile())) {
                // Enum作成
                GenerateContext generateContext = new GenerateContext();
                GenerateTarget target = generateContext.newTarget(DefaultTemplate.JAVA8);

                ClassModel classModel = ClassModel.builder()
                        // ヘッダーコメント
                        .commentHeader("/* Generated by epion-t3-devtools */")
                        // パッケージ
                        .packageName(context.getSpec().getInfo().getCustomPackage() + ".messages")
                        // JavaDoc
                        .javaDoc(JavaDocModel.builder()
                                .mainContent(context.getSpec().getInfo().getName() + "用メッセージ定義Enum.")
                                .annotation(JavaDocAnnotationModel.builder()
                                        .name("author")
                                        .content("epion-t3-devtools").build())
                                .build())
                        // アクセス修飾子
                        .accessModifier(AccessModifier.PUBLIC)
                        // enum
                        .classKind(ClassKind.ENUM)
                        .className(WordUtils.capitalize(context.getSpec().getInfo().getName()) + "Messages")
                        // interface
                        .implementsClass(ClassModel.builder()
                                .packageName("com.epion_t3.core.message")
                                .className("Messages")
                                .build())
                        // フィールド
                        .field(FieldModel.builder()
                                .javaDoc(JavaDocModel.builder()
                                        .mainContent("メッセージコード")
                                        .build())
                                .accessModifier(AccessModifier.PRIVATE)
                                .type(TypeUtils.getStringClassModel())
                                .name("messageCode")
                                .getterAutoCreate(true)
                                .initConstructor(true)
                                .build())
                        // コンストラクタ
                        .constructor(ConstructorModel.builder()
                                .javaDoc(JavaDocModel.builder()
                                        .mainContent("プライベートコンストラクタ")
                                        .annotation(JavaDocAnnotationModel.builder()
                                                .name("param")
                                                .content("messageCode メッセージコード")
                                                .build())
                                        .build())
                                .accessModifier(AccessModifier.PRIVATE)
                                .constructorAutoCreate(true)
                                .build())
                        .build();

                // 列挙子
                for (Map.Entry<Object, Object> prop : props.entrySet()) {
                    classModel.getEnumerators().add(EnumeratorModel.builder()
                            .name(context.getSpec().getInfo().getName().toUpperCase()
                                    + "_"
                                    + prop.getKey().toString()
                                    .replace(context.getSpec().getInfo().getCustomPackage() + ".", "")
                                    .replace(".", "_").toUpperCase())
                            .value(EnumeratorValueModel.builder()
                                    .value(prop.getKey().toString())
                                    .build())
                            .javaDoc(JavaDocModel.builder()
                                    .mainContent(prop.getValue().toString())
                                    .build())
                            .build());
                }

                target.setClazz(classModel);

                // 出力
                Java8Generator converter = new Java8Generator();
                target.setOutputWriter(fileWriter);
                converter.generate(generateContext);
            } catch (IOException e) {
                throw new GeneratorException("fail output Messages.java.", e);
            }
        }

    }

}
